@@@@@@@@@@@@@@@@@@@@@@@@

************   conversion *********************

str1="abcABC"
res=str1.lower()      ######################   [ str1.upper()]
print(res) =====  >>> abcabc


str1="abc"
print(str1.islower()) ======>>>>>>>>>>>>>True
print('a'.isupper())    ==============>>>>>>>>>Flase








********************************************

a=97 
z=97+26 ===>>122

A=65
Z=65+26-1 ======>90

print(ord('a'))  =====>>>>>>>>>>>>>>>> 97
print(chr(97))   ============>>>>>>>>>>>>> 'a'


*********************************

isnumeric()     isalpha()         isalnum()

'a'.isalpha() ====>True
'22'.isnumeric()   =====> True
'22a'.isalnum()   ====>>> True
'2a'isnumeric     =======>>>False

**********************************************************************
**************replace***************
str1="abc"
print(str1.replace('a','o')       ========>>>>>>>>obc


to replace lot of letters in given string then use maketrans static function

example:if we want replace a with z
                           b with y
                           c with x
                           like this ......
                           
1.step :map
a="abc"
b="zyx"
mapped=str.maketrans(a,b)

string1="abokc"
res=string1.translate(mapped)
print(res)  =============>>>>>>>>>>> zyokx


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

LONGEST SUBSTRING IN STRINGS
from difflib import SequenceMatcher
smatch=SequenceMatcher(None,str1,str2)
match=smatch.find_longest_match(0,len(str1),0,len(str2))
print(match) ===>match(a=startmatch_index ,b=end_matchindex,size)
print(str1[match.a:match.a+size)) 

  NOTE:HERE B IS EXCLUDE
  
  
  
  
  
  print(str1[match.a:match.b]
  




